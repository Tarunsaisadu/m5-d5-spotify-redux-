{"ast":null,"code":"var _jsxFileName = \"/Users/tarun/Documents/striveschool/spotify-react/src/components/Home.jsx\";\nimport React from \"react\";\nimport AlbumCard from \"./AlbumCard\";\nimport { Row, Col } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Home extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rockSongs: [],\n      popSongs: [],\n      hipHopSongs: []\n    };\n    this.rockArtists = [\"queen\", \"u2\", \"thepolice\", \"eagles\", \"thedoors\", \"oasis\", \"thewho\", \"bonjovi\"];\n    this.popArtists = [\"arianagrande\", \"maroon5\", \"onerepublic\", \"coldplay\", \"katyperry\"];\n    this.hipHopArtists = [\"eminem\", \"snoopdogg\", \"lilwayne\", \"drake\", \"kanyewest\"];\n\n    this.handleArtist = async (artistName, category) => {\n      try {\n        let response = await fetch(\"https://striveschool-api.herokuapp.com/api/deezer/search?q=\" + artistName, {\n          method: \"GET\",\n          headers: new Headers({\n            \"X-RapidAPI-Host\": \"deezerdevs-deezer.p.rapidapi.com\",\n            \"X-RapidAPI-Key\": \"9d408f0366mshab3b0fd8e5ecdf7p1b09f2jsne682a1797fa0\"\n          })\n        });\n        let result = await response.json();\n        let songInfo = result.data;\n        this.setState({\n          [category]: [...this.state[category], songInfo[0]]\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    this.componentDidMount = async () => {\n      let rockRandomArtists = [];\n      let popRandomArtists = [];\n      let hipHopRandomArtists = [];\n\n      while (rockRandomArtists.length < 4) {\n        let artist = this.rockArtists[Math.floor(Math.random() * this.rockArtists.length)];\n\n        if (!rockRandomArtists.includes(artist)) {\n          rockRandomArtists.push(artist);\n        }\n      }\n\n      while (popRandomArtists.length < 4) {\n        let artist = this.popArtists[Math.floor(Math.random() * this.popArtists.length)];\n\n        if (!popRandomArtists.includes(artist)) {\n          popRandomArtists.push(artist);\n        }\n      }\n\n      while (hipHopRandomArtists.length < 4) {\n        let artist = this.hipHopArtists[Math.floor(Math.random() * this.hipHopArtists.length)];\n\n        if (!hipHopRandomArtists.includes(artist)) {\n          hipHopRandomArtists.push(artist);\n        }\n      }\n\n      for (let j = 0; j < rockRandomArtists.length; j++) await this.handleArtist(rockRandomArtists[j], \"rockSongs\");\n\n      for (let k = 0; k < popRandomArtists.length; k++) await this.handleArtist(popRandomArtists[k], \"popSongs\");\n\n      for (let l = 0; l < hipHopRandomArtists.length; l++) await this.handleArtist(hipHopRandomArtists[l], \"hipHopSongs\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Col, {\n      className: \"col-12 col-md-9 offset-md-3 mainPage\",\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-9 col-lg-11 mainLinks d-none d-md-flex\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"TRENDING\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"PODCAST\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"MOODS AND GENRES\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"NEW RELEASES\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"DISCOVER\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), this.props.searchResults.length > 0 && /*#__PURE__*/_jsxDEV(Row, {\n        children: /*#__PURE__*/_jsxDEV(Col, {\n          xs: 10,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"searchResults\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Search Results\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Row, {\n              className: \"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\",\n              children: this.props.searchResults.map(song => /*#__PURE__*/_jsxDEV(AlbumCard, {\n                song: song\n              }, song.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), this.props.searchResults.length === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"rock\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Rock Classics\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                className: \"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\",\n                id: \"rockSection\",\n                children: this.state.rockSongs.map(song => /*#__PURE__*/_jsxDEV(AlbumCard, {\n                  song: song\n                }, song.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"pop\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Pop Culture\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 144,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                className: \"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\",\n                id: \"popSection\",\n                children: this.state.popSongs.map(song => /*#__PURE__*/_jsxDEV(AlbumCard, {\n                  song: song\n                }, song.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 150,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 145,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Row, {\n          children: /*#__PURE__*/_jsxDEV(Col, {\n            xs: 10,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              id: \"hiphop\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"#HipHop\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 159,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(Row, {\n                className: \"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\",\n                id: \"hipHopSection\",\n                children: this.state.hipHopSongs.map(song => /*#__PURE__*/_jsxDEV(AlbumCard, {\n                  song: song\n                }, song.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 165,\n                  columnNumber: 23\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 160,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Home;","map":{"version":3,"sources":["/Users/tarun/Documents/striveschool/spotify-react/src/components/Home.jsx"],"names":["React","AlbumCard","Row","Col","Home","Component","state","rockSongs","popSongs","hipHopSongs","rockArtists","popArtists","hipHopArtists","handleArtist","artistName","category","response","fetch","method","headers","Headers","result","json","songInfo","data","setState","err","console","log","componentDidMount","rockRandomArtists","popRandomArtists","hipHopRandomArtists","length","artist","Math","floor","random","includes","push","j","k","l","render","props","searchResults","map","song","id"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport AlbumCard from \"./AlbumCard\";\nimport { Row, Col } from \"react-bootstrap\";\n\nclass Home extends React.Component {\n  state = {\n    rockSongs: [],\n    popSongs: [],\n    hipHopSongs: [],\n  };\n\n  rockArtists = [\n    \"queen\",\n    \"u2\",\n    \"thepolice\",\n    \"eagles\",\n    \"thedoors\",\n    \"oasis\",\n    \"thewho\",\n    \"bonjovi\",\n  ];\n\n  popArtists = [\n    \"arianagrande\",\n    \"maroon5\",\n    \"onerepublic\",\n    \"coldplay\",\n    \"katyperry\",\n  ];\n\n  hipHopArtists = [\"eminem\", \"snoopdogg\", \"lilwayne\", \"drake\", \"kanyewest\"];\n\n  handleArtist = async (artistName, category) => {\n    try {\n      let response = await fetch(\n        \"https://striveschool-api.herokuapp.com/api/deezer/search?q=\" +\n          artistName,\n        {\n          method: \"GET\",\n          headers: new Headers({\n            \"X-RapidAPI-Host\": \"deezerdevs-deezer.p.rapidapi.com\",\n            \"X-RapidAPI-Key\":\n              \"9d408f0366mshab3b0fd8e5ecdf7p1b09f2jsne682a1797fa0\",\n          }),\n        }\n      );\n      let result = await response.json();\n      let songInfo = result.data;\n      this.setState({\n        [category]: [...this.state[category], songInfo[0]],\n      });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  componentDidMount = async () => {\n    let rockRandomArtists = [];\n    let popRandomArtists = [];\n    let hipHopRandomArtists = [];\n\n    while (rockRandomArtists.length < 4) {\n      let artist =\n        this.rockArtists[Math.floor(Math.random() * this.rockArtists.length)];\n      if (!rockRandomArtists.includes(artist)) {\n        rockRandomArtists.push(artist);\n      }\n    }\n\n    while (popRandomArtists.length < 4) {\n      let artist =\n        this.popArtists[Math.floor(Math.random() * this.popArtists.length)];\n      if (!popRandomArtists.includes(artist)) {\n        popRandomArtists.push(artist);\n      }\n    }\n\n    while (hipHopRandomArtists.length < 4) {\n      let artist =\n        this.hipHopArtists[\n          Math.floor(Math.random() * this.hipHopArtists.length)\n        ];\n      if (!hipHopRandomArtists.includes(artist)) {\n        hipHopRandomArtists.push(artist);\n      }\n    }\n\n    for (let j = 0; j < rockRandomArtists.length; j++)\n      await this.handleArtist(rockRandomArtists[j], \"rockSongs\");\n\n    for (let k = 0; k < popRandomArtists.length; k++)\n      await this.handleArtist(popRandomArtists[k], \"popSongs\");\n\n    for (let l = 0; l < hipHopRandomArtists.length; l++)\n      await this.handleArtist(hipHopRandomArtists[l], \"hipHopSongs\");\n  };\n\n  render() {\n    return (\n      <Col className=\"col-12 col-md-9 offset-md-3 mainPage\">\n        <Row>\n          <div className=\"col-9 col-lg-11 mainLinks d-none d-md-flex\">\n            <div>TRENDING</div>\n            <div>PODCAST</div>\n            <div>MOODS AND GENRES</div>\n            <div>NEW RELEASES</div>\n            <div>DISCOVER</div>\n          </div>\n        </Row>\n        {this.props.searchResults.length > 0 && (\n          <Row>\n            <Col xs={10}>\n              <div id=\"searchResults\">\n                <h2>Search Results</h2>\n                <Row className=\"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\">\n                  {this.props.searchResults.map((song) => (\n                    <AlbumCard song={song} key={song.id} />\n                  ))}\n                </Row>\n              </div>\n            </Col>\n          </Row>\n        )}\n        {this.props.searchResults.length === 0 && (\n          <>\n            <Row>\n              <Col xs={10}>\n                <div id=\"rock\">\n                  <h2>Rock Classics</h2>\n                  <Row\n                    className=\"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\"\n                    id=\"rockSection\"\n                  >\n                    {this.state.rockSongs.map((song) => (\n                      <AlbumCard song={song} key={song.id} />\n                    ))}\n                  </Row>\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={10}>\n                <div id=\"pop\">\n                  <h2>Pop Culture</h2>\n                  <Row\n                    className=\"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\"\n                    id=\"popSection\"\n                  >\n                    {this.state.popSongs.map((song) => (\n                      <AlbumCard song={song} key={song.id} />\n                    ))}\n                  </Row>\n                </div>\n              </Col>\n            </Row>\n            <Row>\n              <Col xs={10}>\n                <div id=\"hiphop\">\n                  <h2>#HipHop</h2>\n                  <Row\n                    className=\"row-cols-1 row-cols-sm-2 row-cols-lg-3 row-cols-xl-4 imgLinks py-3\"\n                    id=\"hipHopSection\"\n                  >\n                    {this.state.hipHopSongs.map((song) => (\n                      <AlbumCard song={song} key={song.id} />\n                    ))}\n                  </Row>\n                </div>\n              </Col>\n            </Row>\n          </>\n        )}\n      </Col>\n    );\n  }\n}\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}